@page "/search"
@rendermode InteractiveServer
@using CheckDiePreise.Data.Models
@using Radzen
@using Radzen.Blazor

<MudSnackbarProvider/>

<MudPaper Class="pa-16 ma-2" Elevation="3">
    <MudText Typo="Typo.h4">Produktsuche</MudText>

    <MudGrid>
        <MudItem sm="8" xs="12">
            <MudTextField Label="Produktname oder Artikelnummer" Variant="MudBlazor.Variant.Outlined" @bind-Value="_productName" />
            <MudText Typo="Typo.caption">Tipp: Eine Einzelwort-Suche ergibt bessere Resultate!</MudText>
            <MudDivider Class="mt-8 mb-4"/>
          
            <MudText Typo="Typo.body1">Suche in...</MudText>
            <MudRadioGroup @bind-Value="_searchAll">
                    <MudRadio Value="true" Color="Color.Primary">Allen Märkten</MudRadio>
                    <MudRadio Value="false" Color="Color.Primary">Ausgewählten Märkten</MudRadio>
            </MudRadioGroup>

            @if (!_searchAll)
            {
                <MudPaper Class="pa-2 ma-2">
                    <MudStack Row="true">

                    @foreach (string store in _availableStores)
                    {
                        <MudSwitch @bind-Value="_searchStores[store]" Label="@store" Color="Color.Primary" />
                    }

                    </MudStack>
                </MudPaper>
            }
            <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                <MudDivider Class="mt-8 mb-4" />
            </MudHidden>

            <MudRadioGroup @bind-Value="_searchTrend">
                <MudRadio Value="@("up")" Color="Color.Primary">Nur Preissteigerungen</MudRadio>
                <MudRadio Value="@("down")" Color="Color.Primary">Nur Preissenkungen</MudRadio>
                <MudRadio Value="@("both")" Color="Color.Primary">Alle Preisänderungen</MudRadio>
            </MudRadioGroup>

        </MudItem>
        
        @* ---------- DEBUG ----------------------- *@
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
            <MudItem xs="4">
                <MudText Typo="Typo.h6">Debug</MudText>
                @foreach (KeyValuePair<string, bool> store in _searchStores)
                {
                    <MudText>@store.Key : @store.Value.ToString()</MudText>
                }

                <MudText>@_searchTrend</MudText>
                <MudText>All Dates in Chart:</MudText>
                @foreach(DateTime date in allDatesInChart)
                {
                    <MudText>@date.ToString()</MudText>
                }
                @foreach (var identifier in _identifierInChart)
                {
                    <MudText>@identifier</MudText>
                }

            </MudItem>
        </MudHidden>
    </MudGrid>  
    <MudButton class="mt-4" Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick=" SearchProductChanges">Produkt suchen</MudButton>
</MudPaper>


@* ---------- SPINNER ----------------------- *@

@if (_isSearching)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}

@if (_productData is not null)
{
    if (_productData.Count > 0)
    {
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
        @if(_identifierInChart.Count > 0){
            @* ---------- CHART ----------------------- *@
            <MudPaper Class="pa-16 ma-2" Elevation="3">

                <RadzenChart>
                    @foreach (KeyValuePair<string, List<DataItem>> dataset in _chartData)
                    {
                        <RadzenLineSeries Interpolation="@interpolation" Data="@dataset.Value" CategoryProperty="Date" Title="@dataset.Key" LineType="LineType.Solid" ValueProperty="Price">
                            <RadzenMarkers Visible="false" MarkerType="MarkerType.Square" />
                            <RadzenSeriesDataLabels Visible="true" />
                        </RadzenLineSeries>
                    }

                    <RadzenCategoryAxis Padding="20" />
                    <RadzenValueAxis Step="1" Formatter="FormatAsDouble">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Preis in €" />
                    </RadzenValueAxis>
                </RadzenChart>

                <MudStack Row="true" Reverse="true">
                    <MudTooltip Text="Diagramm zurücksetzen">
                        <MudFab OnClick="DeleteAllSeriesInChart" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Replay" Size="Size.Small" />
                    </MudTooltip>
                </MudStack>

            </MudPaper>

        }
        </MudHidden>
        

        @* ---------- STORES ----------------------- *@
        <MudPaper Class="pa-16 ma-2" Elevation="3">

            <MudExpansionPanels MultiExpansion="true">

                @foreach (KeyValuePair<string, Dictionary<string, List<ProductChange>>> store in _productData)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.LocalGroceryStore" class="mr-3"></MudIcon>
                                <MudText><strong>@store.Key</strong> (@store.Value.Count() Produkte)</MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudExpansionPanels MultiExpansion="true">

                                @* ---------- PRODUCTS ----------------------- *@

                                @foreach (KeyValuePair<string, List<ProductChange>> product in store.Value)
                                {
                                    <MudExpansionPanel>
                                        <TitleContent>
                                            <div class="d-flex align-center">
                                                @if (product.Value[product.Value.Count - 1].Trend == "up")
                                                {
                                                    <span style="color:red;"> <MudIcon Icon="@Icons.Material.Filled.TrendingUp" class="mr-3"></MudIcon></span>  @product.Key.ToString()
                                                }
                                                else if (product.Value[product.Value.Count - 1].Trend == "down")
                                                {
                                                    <span style="color:green;"> <MudIcon Icon="@Icons.Material.Filled.TrendingDown" class="mr-3"></MudIcon></span> @product.Key.ToString()
                                                }
                                                else
                                                {
                                                    <span style="color:gray;"> <MudIcon Icon="@Icons.Material.Filled.TrendingFlat" class="mr-3"></MudIcon></span>  @product.Key.ToString()
                                                    ;
                                                }
                                            </div>

                                        </TitleContent>
                                        <ChildContent>
                                            <MudGrid>
                                                <MudItem xs="10">
                                                    <ul>
                                                        @foreach (ProductChange productChange in product.Value)
                                                        {
                                                            <li>
                                                                <strong>@productChange.Date.ToString("dd/MM/yyyy"):</strong> @productChange.Price €
                                                            </li>
                                                        }
                                                    </ul>
                                                </MudItem>
                                                <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
                                                    <MudItem xs="2">

                                                        @if (_identifierInChart.Contains(product.Value[0].Identifier))
                                                        {
                                                            <MudTooltip Text="Aus Diagramm ausblenden">
                                                                <MudIconButton OnClick="() => AddChartData(store.Key,product.Key.ToString(), product.Value[0].Identifier)" Icon="@Icons.Material.Filled.MultilineChart" Variant="MudBlazor.Variant.Filled" Color="Color.Error" Size="Size.Medium" />
                                                            </MudTooltip>
                                                        }
                                                        else
                                                        {
                                                            <MudTooltip Text="Im Diagramm anzeigen">
                                                                <MudIconButton OnClick="() => AddChartData(store.Key,product.Key.ToString(), product.Value[0].Identifier)" Icon="@Icons.Material.Filled.StackedBarChart" Variant="MudBlazor.Variant.Filled" Color="Color.Secondary" Size="Size.Medium" />
                                                            </MudTooltip>

                                                        }
                                                    </MudItem>
                                                </MudHidden>
                                            </MudGrid>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                }
                            </MudExpansionPanels>
                        </ChildContent>
                    </MudExpansionPanel>

                }

            </MudExpansionPanels>
        </MudPaper>
    }   
    else
    {
        <MudPaper Class="pa-16 ma-2" Elevation="3">
            <MudText>Keine Ergebnisse.</MudText>
        </MudPaper>
    }
}